//
@mixin container-breakpoint-down($name, $current, $breakpoints: $container-breakpoints) {
  $min: map-get($breakpoints, $name);
  $crt: map-get($breakpoints, $current);
  @if $min <= $crt {
    @content;
  }
}

//
@mixin container-breakpoint-up($name, $current, $breakpoints: $container-breakpoints) {
  $min: map-get($breakpoints, $name);
  $crt: map-get($breakpoints, $current);
  @if $min >= $crt {
    @content;
  }
}

//
@function container-infix($name, $breakpoints: $container-breakpoints) {
  @if $name != 'no' {
    @return '-#{$name}';
  }
  @return '';
}

@function container-none-not($start, $end, $breakpoints: $container-breakpoints) {
  $not: '';
  $started: 0;
  @each $breakpoint in map-keys($breakpoints) {
    @if $breakpoint == $start {
      $started: 1;
    }
    @if $breakpoint == $end {
      $started: 2;
    }
    @if $started >= 1 {
      $not: $not + ':not([class*=\'col-#{$breakpoint}-w\'])';
      @if $started == 2 {
        @return $not;
      }
    }
  }
  @return $not;
}

//
@mixin make-container-hidden-columns(
  $current: 'no',
  $columns: $grid-columns,
  $breakpoints: $container-breakpoints
) {
  @each $breakpoint in map-keys($breakpoints) {
    @if $breakpoint != 'no' {

      @include container-breakpoint-down($breakpoint, $current, $breakpoints) {

        $infix: container-infix($breakpoint, $breakpoints);
        $not: container-none-not($breakpoint, $current, $breakpoints);
        .col#{$infix}-none#{$not} {
          display: none;
        }
        .col#{$infix}-flex {
          display: flex;
        }
        .col#{$infix}-block {
          display: block;
        }
        .d#{$infix}-none#{$not} {
          display: none;
        }
        .d#{$infix}-flex {
          display: flex;
        }
        .d#{$infix}-block {
          display: block;
        }
      }
    }
  }
}

//
@mixin make-container-columns(
  $current: 'no',
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $container-breakpoints
) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }
  $crt: map-get($breakpoints, $current);

  @each $breakpoint in map-keys($breakpoints) {
    $infix: container-infix($breakpoint, $breakpoints);
    $min: map-get($breakpoints, $breakpoint);

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .col#{$infix}-w#{$i} {
          @extend %grid-column;
        }
      }
    }

    .col#{$infix},
    .col#{$infix}-wauto {
      @extend %grid-column;
    }

    @include container-breakpoint-down($breakpoint, $current, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-w#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-w#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      .order#{$infix}-first {
        order: -1;
      }

      .order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .order#{$infix}-w#{$i} {
          order: $i;
        }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == '' and $i == 0) {
            // Avoid emitting useless .offset-0
            .offset#{$infix}-w#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}
